app StorAI {
  wasp: {
    version: "^0.10.3"
  },
  title: "StorAI",
  dependencies: [
    ("prettier", "2.8.8"),
    ("node-fetch", "3.3.1")
  ],
  auth: {
    // Expects entity User to have (username:String) and (password:String) fields.
    userEntity: User,
    methods: {
      // We also support Google and GitHub, with more on the way!
      usernameAndPassword: {}
    },
    // We'll see how this is used a bit later
    onAuthFailedRedirectTo: "/login"
  }
}

route RootRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true,
  component: import Main from "@client/MainPage.tsx"
}

route CreateCharacterRoute { path: "/create", to: CreateCharacter }
page CreateCharacter {
  authRequired: true,
  component: import CreateCharacter from "@client/CreateCharacter.tsx"
}

route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/SignupPage"
}

route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/LoginPage"
}

query getCharacter {
  fn: import { getCharacter } from "@server/queries.js",
  entities: [Character]
}

action createCharacter {
  fn: import { createCharacter } from "@server/actions.js",
  entities: [Character]
}

action damage {
  fn: import { damage } from "@server/actions.js",
  entities: [Character]
}

action sendCommand {
  fn: import { sendCommand } from "@server/actions.js",
}

entity User {=psl
  id          Int     @id @default(autoincrement())
  username    String  @unique
  password    String
  character   Character?
psl=}

entity Character {=psl
  id              Int     @id @default(autoincrement())
  user            User    @relation(fields: [userId], references: [id])
  userId          Int     @unique
  name            String
  health_head     Int
  health_body     Int
  health_leftArm  Int
  health_rightArm Int
  health_leftLeg  Int
  health_rightLeg Int
psl=}